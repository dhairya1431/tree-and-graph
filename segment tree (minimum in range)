#include<bits/stdc++.h>
using namespace std;
#define maxn 100010

int arr[maxn];
int tree[4*maxn];
void build(int node , int start,int endd)
{
    if(start==endd)
    {
        tree[node] = arr[start];
        return;
    }

    int mid = start + (endd-start)/2;

    build(2*node+1,start,mid);
    build(2*node+2,mid+1,endd);

    tree[node] = min(tree[2*node+1] , tree[2*node+2]);
}
void update(int node,int start,int endd,int idx,int val)
{
    if(idx<start || idx>endd) return;
    if(start == endd)
    {
        tree[node] = arr[start];
        return;
    }
    
     int mid = start + (endd-start)/2;

    update(2*node+1,start,mid,idx,val);
    update(2*node+2,mid+1,endd,idx,val);

    tree[node] = min(tree[2*node+1] , tree[2*node+2]);
}
int query(int node,int start,int endd,int left,int right)
{
    if(start>right || endd<left) return 1000000;
    if(left<=start && endd<=right) return tree[node];

    int mid = start + (endd-start)/2;
    
    return min(query(2*node+1,start,mid,left,right),query(2*node+2,mid+1,endd,left,right));
}
int main()
{
    int n;int q;
    cin>>n>>q;

    for(int i=1;i<=n;i++) cin>>arr[i];

    build(1,1,n);
    while(q--)
    {
        char ch;
        int left,right;
        cin>>ch>>left>>right;

        if(ch == 'q')
        cout<<query(1,1,n,left,right)<<endl;
        else
        arr[left]=right,update(1,1,n,left,right);
    }

}
/*
5 5
1 5 2 4 3
q 1 5
q 1 3
q 3 5
u 3 6
q 1 5


1
1
2
1

*/
